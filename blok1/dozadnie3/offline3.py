def mergesort(T):
    if len(T)>1:
        r = len(T)//2
        L = T[:r]
        M = T[r:]
        mergesort(L)
        mergesort(M)
        i = j = k = 0
        while i < len(L) and j < len(M):
            if L[i]<M[j]:
                T[k]=L[i]
                i+=1
            else:
                T[k]=M[j]
                j+=1
            k+=1
        while i < len(L):
            T[k] = L[i]
            i += 1
            k += 1
        while j < len(M):
            T[k] = M[j]
            j += 1
            k += 1
    return T

def bucketsort(T,P):
    maxx = max(T)
    minn = min(T)
    numOfBuckets = len(T)//7+1

    rng = (maxx - minn) / numOfBuckets
    array = []
    for i in range(numOfBuckets):
        array.append([])
    for i in range(len(T)):
        diff = (T[i] - minn) / rng - int((T[i] - minn) / rng)

        if (diff == 0 and T[i] != minn):
            array[int((T[i] - minn) / rng) - 1].append(T[i])

        else:
            array[int((T[i] - minn) / rng)].append(T[i])
    for i in range(len(array)):
        if len(array[i])!=0:
            array[i]=mergesort(array[i])

    k=0
    for i in array:
        if i:
            for j in i:
                T[k] = j
                k+=1
    return T



P = [(57, 100, 0.0196078431372549), (7, 94, 0.06862745098039216), (44, 73, 0.058823529411764705), (10, 39, 0.06862745098039216), (5, 56, 0.058823529411764705), (3, 78, 0.029411764705882353), (8, 65, 0.09803921568627451), (23, 86, 0.08823529411764706), (8, 53, 0.0196078431372549), (42, 43, 0.06862745098039216), (24, 73, 0.0196078431372549), (10, 59, 0.029411764705882353), (29, 32, 0.09803921568627451), (54, 59, 0.049019607843137254), (4, 9, 0.09803921568627451), (7, 86, 0.00980392156862745), (48, 85, 0.0196078431372549), (31, 42, 0.029411764705882353), (28, 77, 0.0392156862745098), (11, 82, 0.029411764705882353)]
T = [11.960951405577362, 39.98154238378629, 38.08903460949659, 35.23642993113026, 5.5641052974388, 31.890407466795295, 52.12664378620684, 57.96659772982821, 56.98887743148953, 52.52541924873367, 4.659371558576822, 8.876700441818684, 67.5561606688425, 62.38795432681218, 8.654032969847322, 74.73860510857776, 42.949660264886916, 50.30428815027699, 5.0820042341947556, 54.109074644278735, 51.47635902930051, 44.67557532945648, 16.705942353233695, 45.72748805722222, 15.932805270887911, 12.41814783634618, 71.50206832960248, 11.60443536983803, 44.701866515912116, 20.99533121054992, 62.21977755613625, 81.84079531254247, 31.674711930565536, 30.9788429136388, 6.714016325771809, 25.53244440862909, 54.23834891151637, 68.24620117293671, 83.76173871941864, 31.400180703494698, 55.68241061922163, 15.429355393629521, 30.17001372203231, 58.16315707145259, 72.18151139188558, 32.73828394757584, 42.99623245187104, 29.20713874185458, 84.07559974398464, 75.50281412480399, 19.377707809209824, 42.35993453999981, 21.586637924425304, 54.239714013878256, 31.25688093341887, 37.91247274586931, 68.69057496543974, 31.083418009337038, 53.130452152341604, 42.68715512519702, 43.58317397069186, 31.06380678107962, 26.162745183333755, 54.55649445718154, 14.957345359958708, 42.34890898549929, 43.110388837754726, 31.966527957934886, 33.76101236511022, 59.48610421130434, 12.361222924664617, 42.42830140097067, 42.82849820423871, 55.76972235785797, 42.39641113951802, 59.71394189307466, 58.46436134260148, 4.901329836342484, 34.53436247073114, 31.541274587158114, 4.274617341347039, 56.97896303003654, 30.770760640501976, 36.33516228245571, 19.706098129041493, 17.28163997689262, 42.83743862621486, 77.96418437408283, 56.39292336720973, 15.414660120848566, 55.00385343655944, 15.871598795522004, 70.26106900628656, 5.246355755720288, 34.8325696606189, 6.185464629437774, 31.090803840197623, 31.298429816495627, 7.936326242983341, 26.17306627659127]
print(bucketsort(T,P))